//plugins {
//    id "com.stehno.natives" version "0.3.1"
//}
apply plugin: "java"
apply plugin: "application"
mainClassName="infinity.Main"
applicationDefaultJvmArgs = ["-Xmx1024m", "-Xms512m", "-XX:MaxDirectMemorySize=1024m","--add-opens=java.base/jdk.internal.ref=ALL-UNNAMED"]

dependencies {
	// logging
    implementation "org.slf4j:slf4j-api:$slf4jVersion"
    implementation "org.apache.logging.log4j:log4j-api:$log4jVersion"
    implementation "org.apache.logging.log4j:log4j-core:$log4jVersion"
    runtimeOnly "org.apache.logging.log4j:log4j-slf4j-impl:$log4jVersion"

    //https://mvnrepository.com/artifact/com.google.code.findbugs/jsr305
    implementation "com.google.code.findbugs:jsr305:3.0.2"

    //Dyn4j
    //http://www.dyn4j.org/
    //implementation "org.dyn4j:dyn4j:3.4.0"
    //implementation "org.dyn4j:dyn4j:4.0.0"
    //implementation project(":dyn4j-bin")

    //Ini4j to parse settings files
    //http://ini4j.sourceforge.net/// 
    //https://mvnrepository.com/artifact/org.ini4j/ini4j
    implementation "org.ini4j:ini4j:0.5.4"

	// Apache Commons Stuff
    // https://mvnrepository.com/artifact/org.apache.commons/commons-collections4
    implementation "org.apache.commons:commons-collections4:4.4"
    implementation "org.apache.commons:commons-math:2.2"

    // Trying this for saving/loading configs
    implementation "com.google.code.gson:gson:2.8.2"

    // For Lemur styles
    implementation "org.codehaus.groovy:groovy-all:2.4.5"

	// jMonkeyEngines
    implementation "org.jmonkeyengine:jme3-core:$jmeVersion" 
    implementation "org.jmonkeyengine:jme3-desktop:$jmeVersion"
    implementation "org.jmonkeyengine:jme3-effects:$jmeVersion"
    implementation "org.jmonkeyengine:jme3-lwjgl3:$jmeVersion"
    implementation "org.jmonkeyengine:jme3-plugins:$jmeVersion"

	// Simsilica
    implementation "com.simsilica:lemur:$lemurVersion"
    implementation "com.simsilica:lemur-proto:$lemurProtoVersion"
    implementation "com.simsilica:lemur-props:$lemurPropsVersion"
    implementation "com.simsilica:pager:1.0.1-SNAPSHOT"
    implementation "com.simsilica:sim-ethereal:$simEtherealVersion"
    implementation "com.simsilica:sim-fx:1.0.1-SNAPSHOT"
    implementation "com.simsilica:sim-math:$simMathVersion"
    implementation "com.simsilica:sio2:$sio2Version" 
    implementation "com.simsilica:zay-es:$zayEsVersion"
    implementation "com.simsilica:zay-es-net:$zayEsNetVersion"

	// Simsilica MOSS
    //implementation "com.simsilica:mphys:$mossVersion"
    implementation "com.simsilica:mblock:$mossVersion"
    implementation "com.simsilica:mblock-physb:$mossVersion"
    implementation "com.simsilica:mworld:$mossVersion"
    implementation "com.simsilica:sio2-mblock:$mossVersion"
    implementation "com.simsilica:sio2-mphys:$mossVersion"
    implementation "com.simsilica:bpos:$mossVersion"
    implementation "com.simsilica:crig:$mossVersion"

    //jWalkable for 2d polygonal pathfinding
    //https://github.com/implicit-invocation/jwalkable
    //implementation "com.github.implicit-invocation:jwalkable:master-SNAPSHOT"
    
    //Noise4j dungeon generation
    //https://github.com/czyzby/noise4j
    implementation "com.github.czyzby:noise4j:0.1.0"

    //GDX-AI for steering behaviours
    //https://github.com/libgdx/gdx-ai
    //compile "com.badlogicgames.gdx:gdx-ai:1.8.1:sources"
    //compile "com.badlogicgames.gdx:gdx-ai:1.8.1:javadoc"
    implementation "com.badlogicgames.gdx:gdx-ai:1.8.2"

    //We"re using a java port of http://www.angusj.com/delphi/clipper.php to do polygon boolean operations
    implementation "de.lighti:Clipper:6.4.2"

	// Local dependencies
    implementation project(":infinity:api") 
    runtimeOnly project(":infinity:assets")     
}

checkstyle {
    sourceSets = []
}

jar {
    archiveBaseName = "subspace-infinity"
}

distributions {
    main {
        distributionBaseName = "subspace-infinity"
    }
}

project(":infinity:assets") {
    apply plugin:"java"
    
    sourceSets {
        main {
            resources {
                srcDir "."
				excludes = [
					".settings/**",
					"bin/**",
					"build/**"
				]
                includes = [
                    "**/*.ogg", 
                    "**/*.wav", 
                    "**/*.png", 
                    "**/*.jpg", 
                    "**/*.j3md", 
                    "**/*.frag", 
                    "**/*.vert",
                    "**/*.glsllib",
                    "**/*.fnt",
                    "**/*.j3m",
                    "**/*.j3o",
                    "**/*.blocks",
                    "**/*.wa2",
                    "**/*.bmp",
                    "**/*.bm2",
                    "**/*.lvl",
                    "**/*.lvz"
                ]
            }
        }
    }    
}

